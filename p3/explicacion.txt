Clase Clasificador --> implementar clasificador_genetico

                        Entrenamiento (crear la poblacion para el numero de epocas) Train
                          Creo Una poblacion de X cromosomas aleatorio
                          p' Seleccionar progenitores --> lo del examen
                          P' Cruzar
                          P' Mutar
                          Elitismo eliminar bottom 5% de P y sustituir por top 5% de P'



                        Clasifica:
                            Coger datos de test


Clase Cromosoma (para codificar data)
  atr --> numero de reglas
   --> longitud de regla ()
  - cruzar
  - mutar
  - fitness





Main -->

  dataset = datos(balalal)
  clf = clasificador_genetico
  estrategia = ep.ValidacionSimple() (train/test)
  errors.append(clf.validacion(estrategia, dataset, clf))




[2, 3, 2]

  5 atributos (x,o,b)
  cada atributo 3 bits
  atr1 = o -->010
  atr2 = b -->001
  ...
  atr3 = x --> 100

  010 010 010 010 010 0
  ooooo -> 0
  oooox -> ?

  110 010 010 010 010 0
  ooooo -> 0
  xoooo -> 0
  oooob -> ?

000 000 000 000 000 1
  111 111 111 111 011 1, 010 010 010 010 010 0
  010 010 100 100 100 --> 1

  010 010 010 010 010 0, 010 010 010 010 010 0, 111 111 111 111 111 1, 010 010 010 010 010 0
  111 111 111 111 011 1, 010 010 010 010 010 0

10 filas de datos
2342134
1212341234
12123412341234
12123412341234
5242345
52423453245



  [[cr1 9]
  [cr3 4]
  [cr2 3]
  [cr5 3]
  [cr4 1]]

  total = 20
  0.4 --> cr1
  0.4*20 = 8


  total = 0.9 + 0.3 blablabla --> 2
  normalizamos
  cr1 -> 0.45
  cr2 -> 0.45+0.15=0.6
  cr3 -> 0.6+0.2=0.8
  cr4 -> 0.8+0.05=0.85
  cr5 -> 0.85+0.15=1
  0.5 *
  0-0.56 --> cr1
  0-0.3 --> cr2


  [0,1] --> total
  creo list con 9 0s, 3 1s, 4 2s, 1 3, 3 4s
                  [999999999911122234444] --> 1
